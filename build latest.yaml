name: Git Migration Tool CI/CD

on:
  workflow_dispatch:
    inputs:
      source_url:
        description: 'Source repository URL'
        required: true
        type: string
        default: 'https://github.com/example/source-repo.git'
      destination_url:
        description: 'Destination repository URL'
        required: true
        type: string
        default: 'https://github.com/example/destination-repo.git'
      repository_directory:
        description: 'Local directory name for cloned repository'
        required: true
        type: string
        default: 'migrated-repo'
      commit_message:
        description: 'Commit message for the merge'
        required: true
        type: string
        default: 'Merge remote main branch during migration'
      run_migration:
        description: 'Run the actual migration (false for build only)'
        required: false
        type: boolean
        default: false
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - '*.csproj'
      - '*.sln'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - '*.csproj'
      - '*.sln'

env:
  DOTNET_VERSION: '6.0.x'
  BUILD_CONFIGURATION: 'Release'
  PROJECT_PATH: './GitMigration.csproj'
  OUTPUT_PATH: './bin/Release/net6.0'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build application
      run: |
        dotnet build ${{ env.PROJECT_PATH }} \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-restore \
          --verbosity minimal

    - name: Run unit tests
      run: |
        dotnet test ./GitMigration.Tests/GitMigration.Tests.csproj \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory ./TestResults \
          --collect:"XPlat Code Coverage"

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Test Results
        path: './TestResults/*.trx'
        reporter: dotnet-trx

    - name: Upload code coverage reports
      uses: codecov/codecov-action@v3
      if: success() || failure()
      with:
        files: ./TestResults/*/coverage.cobertura.xml
        fail_ci_if_error: false

    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-build \
          --output ./publish \
          --runtime linux-x64 \
          --self-contained false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: git-migration-tool
        path: ./publish/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "❌ Vulnerable packages found!"
          cat security-scan.log
          exit 1
        else
          echo "✅ No vulnerable packages found."
        fi

  dry-run-migration:
    name: Dry Run Migration Test
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' && !inputs.run_migration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: git-migration-tool
        path: ./publish

    - name: Setup Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git config --global init.defaultBranch main

    - name: Make executable
      run: chmod +x ./publish/GitMigration

    - name: Validate parameters
      run: |
        echo "🔍 Validating migration parameters..."
        echo "Source URL: ${{ inputs.source_url }}"
        echo "Destination URL: ${{ inputs.destination_url }}"
        echo "Directory: ${{ inputs.repository_directory }}"
        echo "Commit Message: ${{ inputs.commit_message }}"
        
        # Basic URL validation
        if [[ ! "${{ inputs.source_url }}" =~ ^https?://.*\.git$ ]]; then
          echo "❌ Invalid source URL format"
          exit 1
        fi
        
        if [[ ! "${{ inputs.destination_url }}" =~ ^https?://.*\.git$ ]]; then
          echo "❌ Invalid destination URL format"
          exit 1
        fi
        
        echo "✅ Parameters validated successfully"

    - name: Test application help
      run: |
        cd ./publish
        ./GitMigration || true
        echo "✅ Application help displayed successfully"

  run-migration:
    name: Execute Migration
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'workflow_dispatch' && inputs.run_migration
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: git-migration-tool
        path: ./publish

    - name: Setup Git with authentication
      run: |
        git config --global user.name "GitHub Actions Migration Bot"
        git config --global user.email "migration-bot@github.com"
        git config --global init.defaultBranch main
        
        # Setup Git credential helper for authentication
        git config --global credential.helper store
        echo "https://${{ secrets.GIT_TOKEN }}:x-oauth-basic@github.com" > ~/.git-credentials

    - name: Make executable
      run: chmod +x ./publish/GitMigration

    - name: Create workspace directory
      run: |
        mkdir -p ./migration-workspace
        cd ./migration-workspace

    - name: Execute migration
      id: migration
      run: |
        cd ./migration-workspace
        echo "🚀 Starting Git repository migration..."
        
        ../publish/GitMigration \
          "${{ inputs.source_url }}" \
          "${{ inputs.destination_url }}" \
          "${{ inputs.repository_directory }}" \
          "${{ inputs.commit_message }}" 2>&1 | tee migration.log
        
        # Check if migration was successful
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "migration_status=success" >> $GITHUB_OUTPUT
          echo "✅ Migration completed successfully!"
        else
          echo "migration_status=failed" >> $GITHUB_OUTPUT
          echo "❌ Migration failed!"
          exit 1
        fi

    - name: Upload migration logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: migration-logs
        path: ./migration-workspace/migration.log
        retention-days: 90

    - name: Cleanup workspace
      if: always()
      run: |
        rm -rf ./migration-workspace
        rm -f ~/.git-credentials

    - name: Notify on success
      if: steps.migration.outputs.migration_status == 'success'
      run: |
        echo "::notice title=Migration Success::Git repository migration completed successfully from ${{ inputs.source_url }} to ${{ inputs.destination_url }}"

    - name: Notify on failure
      if: steps.migration.outputs.migration_status == 'failed'
      run: |
        echo "::error title=Migration Failed::Git repository migration failed. Check the logs for details."

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: git-migration-tool
        path: ./publish

    - name: Generate version
      id: version
      run: |
        VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Create release package
      run: |
        cd ./publish
        tar -czf ../git-migration-tool-${{ steps.version.outputs.version }}.tar.gz *
        cd ..
        ls -la *.tar.gz

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Git Migration Tool v${{ steps.version.outputs.version }}
        body: |
          ## Git Migration Tool Release
          
          ### Features
          - Complete Git repository migration between repositories
          - Support for all branches and tags
          - Unrelated history merging capability
          - Comprehensive error handling and logging
          
          ### Usage
          ```bash
          ./GitMigration <source_url> <destination_url> <directory> <commit_message>
          ```
          
          ### Changes
          - Built from commit: ${{ github.sha }}
          - Build date: $(date +'%Y-%m-%d %H:%M:%S UTC')
        files: |
          git-migration-tool-${{ steps.version.outputs.version }}.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
