# Main CI/CD Pipeline for C# Console Application
# File: .github/workflows/ci-cd.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_NAME: 'MyConsoleApp'
  SOLUTION_PATH: './MyConsoleApp.sln'
  PROJECT_PATH: './src/MyConsoleApp/MyConsoleApp.csproj'
  TEST_PROJECT_PATH: './tests/MyConsoleApp.Tests/MyConsoleApp.Tests.csproj'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux-x64
            runtime: linux-x64
          - os: windows-latest
            artifact-name: windows-x64
            runtime: win-x64
          - os: macos-latest
            artifact-name: macos-x64
            runtime: osx-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.artifact-name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.artifact-name }}
        path: ./publish/${{ matrix.artifact-name }}
        retention-days: 30

  # Code Quality Job
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Run Code Analysis
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --verbosity normal

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Install Security Scanner
      run: dotnet tool install --global security-scan

    - name: Run Security Scan
      run: security-scan ${{ env.SOLUTION_PATH }} --excl-proj=**/*Test*/** --export=security-report.json
      continue-on-error: true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.json

  # Release Job (only on release)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'release'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts

    - name: Create zip files for release
      run: |
        cd ./artifacts
        for dir in */; do
          if [[ "$dir" != "security-report/" ]]; then
            zip -r "${dir%/}.zip" "$dir"
          fi
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/*.zip
        tag_name: ${{ github.event.release.tag_name }}
        name: Release ${{ github.event.release.tag_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---

# Separate workflow for Docker builds
# File: .github/workflows/docker.yml

name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

---

# Dependency update workflow
# File: .github/workflows/dependency-update.yml

name: Dependency Update

on:
  schedule:
    - cron: '0 2 * * 1' # Run every Monday at 2 AM UTC
  workflow_dispatch: # Allow manual trigger

jobs:
  update-dependencies:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Update NuGet packages
      run: |
        dotnet tool install -g dotnet-outdated-tool
        dotnet outdated --upgrade

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update NuGet packages'
        title: 'Automated NuGet Package Updates'
        body: |
          This is an automated pull request to update NuGet packages.
          
          Please review the changes and ensure all tests pass before merging.
        branch: automated/nuget-updates
        delete-branch: true

---

# Performance testing workflow
# File: .github/workflows/performance.yml

name: Performance Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * *' # Daily at 4 AM UTC

jobs:
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release --no-restore

    - name: Run performance tests
      run: dotnet run --project ./tests/MyConsoleApp.PerformanceTests --configuration Release

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: ./performance-results/

---

# Example Dockerfile for the console app
# File: Dockerfile

FROM mcr.microsoft.com/dotnet/runtime:8.0 AS base
WORKDIR /app

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy project files
COPY ["src/MyConsoleApp/MyConsoleApp.csproj", "src/MyConsoleApp/"]
COPY ["tests/MyConsoleApp.Tests/MyConsoleApp.Tests.csproj", "tests/MyConsoleApp.Tests/"]

# Restore dependencies
RUN dotnet restore "src/MyConsoleApp/MyConsoleApp.csproj"

# Copy source code
COPY . .

# Build and test
WORKDIR "/src/src/MyConsoleApp"
RUN dotnet build "MyConsoleApp.csproj" -c Release -o /app/build

# Run tests
WORKDIR "/src"
RUN dotnet test --no-restore --verbosity normal

# Publish
FROM build AS publish
WORKDIR "/src/src/MyConsoleApp"
RUN dotnet publish "MyConsoleApp.csproj" -c Release -o /app/publish

# Final stage
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "MyConsoleApp.dll"]
